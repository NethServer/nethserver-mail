#
# SmartHost policy
#
{
    use esmith::ConfigDB;
    my $db = esmith::ConfigDB->open_ro('smarthosts');

    my $SmartHostName = $postfix{'SmartHostName'} || '';
    my $SmartHostPort = $postfix{'SmartHostPort'} || '';
    my $SmartHostTlsStatus = $postfix{'SmartHostTlsStatus'} || '';
    my $SmartHostStatus = $postfix{'SmartHostStatus'} || 'disabled';

    # Squash duplicates by hash keys
    my %hash = ();

    # Add the system-wide-global-default smarthost record. Can be overridden by additional records
    if ($SmartHostName && $SmartHostPort && $SmartHostTlsStatus && $SmartHostStatus eq 'enabled') {
      $hash{"[$SmartHostName]:$SmartHostPort"} = ($SmartHostTlsStatus eq 'enabled') ? 'encrypt' : 'may';
    }

    # Loop over additional smarthost records from the Relay page
    foreach ($db->get_all_by_prop('status' => 'enabled')) {
        my $host = $_->prop('Host') || next;
        my $port = $_->prop('Port')|| next;
        my $tls = $_->prop('TlsStatus') || '';
        my $k = "[$host]:$port";

        # New keys are created as opportunistic ("may") TLS targets
        if(!exists($hash{$k})) {
            $hash{$k} = 'may'
        }

        # Upgrade to mandatory TLS as soon as some record asks for it
        if ($tls eq 'enabled') {
            $hash{$k} = 'encrypt';
        }
    }

    foreach my $k (keys %hash) {
        $OUT .= $k . "\t" . $hash{$k} . "\n";
    }
}
