#!/usr/bin/perl
#
# Copyright (C) 2020 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

use NethServer::ApiTools;
use strict;
use warnings;
use JSON;

my $input = NethServer::ApiTools::readInput();

my $hostname = $input->{'hostname'};
my $username = $input->{'username'};
my $name = $input->{'name'};
my $password = $input->{'password'};
my $Port = $input->{'Port'};
my $Security = $input->{'Security'};

# find the correct encryption
my $crypt;
if ($input->{Security} eq 'tls') {
    $crypt = '--tls1';
} elsif ($input->{Security} eq 'ssl') {
    $crypt = '--ssl1';
} else {
    $crypt = '';
}

# add double-quotes to password for Mail::IMAPClient bug
my @imapsync =("imapsync","--host2","localhost","--port2","143","--tls2","--user2",
    $name.'*vmail',"--passfile2","/var/lib/nethserver/imapsync/vmail.pwd","--host1",$hostname,
    "--port1",$Port,$crypt,"--user1",$username,"--password1",'"'.$password.'"',"--timeout1","10","--no-modulesversion","--justfoldersizes","--nolog");

open(FH, "@imapsync|");

my $ret;

while (<FH>) {
    chomp;
    if ($_ =~ 'Host2 Nb folders') {
       my @num = $_ =~  / (\d+)/;
       $ret->{host2Folders} = int $num[0];
    }
    elsif ($_ =~ 'Host2 Nb messages') {
       my @num = $_ =~  / (\d+)/;
       $ret->{host2Messages} = int $num[0];
    }
    elsif ($_ =~ 'Host2 Total size') {
        my @num = $_ =~  / (\d+)/;
        $ret->{host2Sizes} = int $num[0];
    }
    elsif ($_ =~ 'Host1 Nb folders') {
        my @num = $_ =~  / (\d+)/;
        $ret->{host1Folders} = int $num[0];
    }
    elsif ($_ =~ 'Host1 Nb messages') {
       my @num = $_ =~  / (\d+)/;
       $ret->{host1Messages} = int $num[0];
    }
    elsif ($_ =~ 'Host1 Total size') {
        my @num = $_ =~  / (\d+)/;
        $ret->{host1Sizes} = int $num[0];
    }
}
close(FH);

if ($?) {
     $ret->{status} = 'error';
} else {
     $ret->{status} = 'success';
}

print encode_json($ret);
