#!/usr/bin/perl

#
# Copyright (C) 2020 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

use strict;
use warnings;
use esmith::ConfigDB;
use esmith::AccountsDB;
use JSON;
use NethServer::Password;
use NethServer::Service;
use File::Copy qw/ copy /;
use NethServer::ApiTools qw(error readInput safe_decode_json);
use Encode;

my $input = readInput();
my $cmd = $input->{'action'};

my $ret = {};

if ($cmd eq 'list') {

    # copy vmail password in readable place for vmail
    umask 027;
    my $source = '/var/lib/nethserver/secrets/vmail';
    my $destination = '/var/lib/nethserver/imapsync/vmail.pwd';
    copy ($source,$destination);

    $ret->{'users'} = [];
    my $adb = esmith::AccountsDB->open_ro();
    my $idb = esmith::ConfigDB->open_ro('imapsync') || esmith::ConfigDB->create('imapsync');
    my $users = safe_decode_json(`/usr/libexec/nethserver/list-users`);

    foreach (keys %$users) {

        $_ =~ m/(.*)\@(:*)/;
        my $user = {
            'name' => $_,
            'displayname' => $1,
            'type' => 'imapsync'
        };

        my $password;
        # the secret file may not exist
        if ( -f '/var/lib/nethserver/imapsync/'.$_.'.pwd') {
            open my $fh, "<:encoding(UTF-8)", '/var/lib/nethserver/imapsync/'.$_.'.pwd';
            # Read until EOF 'slurp' mode
            $password = do { local $/; <$fh> };
            close $fh;
        }

        # remove double-quotes: fix for Mail::IMAPClient bug
        $password =~ s/^"//;
        $password =~ s/"$//;
        # remove the quote of double-quotes to password for Mail::IMAPClient bug
        $password =~ s/\\"/"/g;
        $user->{'props'}{'hostname'} =  $idb->get_prop($_,'hostname') || '';
        $user->{'props'}{'username'} =  $idb->get_prop($_,'username') || '';
        $user->{'props'}{'password'} =  $password || '';
        $user->{'props'}{'DeleteDestination'} =  $idb->get_prop($_,'DeleteDestination') || 'disabled';
        $user->{'props'}{'Exclude'} =  decode("utf8", $idb->get_prop($_,'Exclude') || '');
        $user->{'props'}{'Port'} =  $idb->get_prop($_,'Port') || '143';
        $user->{'props'}{'Security'} =  $idb->get_prop($_,'Security') || 'tls';
        $user->{'props'}{'MailStatus'} =  $adb->get_prop($_,'MailStatus') || 'enabled';

        my $service = NethServer::Service->new("imapsync\@$_");
        $user->{'service'} = ($service->is_running()) ? 'active':'stopped';

        push($ret->{'users'}, $user);

        # Find the last modified log and the exit status
        $user->{'props'}{'LastSync'} = 0;
        $user->{'props'}{'LastSyncStatus'} = JSON::false;
        my $error;

       foreach (glob('/var/log/imapsync/*'.$_.'*.txt')) {
           # find mtime
           my $mtime = (stat $_)[9];

          # if it is the higher mtime, then it is the last sync, use it
          if ($mtime > $user->{'props'}{'LastSync'}) {
                # grep the status exit
                open my $fh, '<:encoding(UTF-8)', $_;
                while ( my $line = <$fh>) {
                     if ($line =~ /Exiting with return value/) {
                         $error = $line;
                         $error =~ s/Exiting with return value //;
                         $error =~ s/\n//;
                     }
                }
               $user->{'props'}{'LastSync'} = $mtime;
               $user->{'props'}{'LastSyncStatus'} = $error;
          }
       }

    }

    # check if we have at least one configured account
    $ret->{'Configured'} = JSON::false;
    if ( glob ('/var/lib/nethserver/imapsync/*.env')) {
        $ret->{'Configured'} = JSON::true;
    }
} elsif ($cmd eq 'running-info') {
    system ("systemctl","is-active","-q","imapsync@*");
    $ret->{'imapsync'} = ($? == 0)?1:0;
} elsif ($cmd eq 'sync-info') {

    my $hostname = $input->{'hostname'};
    my $username = $input->{'username'};
    my $name = $input->{'name'};
    my $Port = $input->{'Port'};
    my $Security = $input->{'Security'};
    my $exclude = $input->{'Exclude'};
    $exclude =~ s/,/|/g;
    $exclude = '|'.$exclude  if ($exclude ne '');

    # find the correct encryption
    my $crypt;
    if ($input->{Security} eq 'tls') {
        $crypt = '--tls1';
    } elsif ($input->{Security} eq 'ssl') {
        $crypt = '--ssl1';
    } else {
        $crypt = '';
    }

    my @imapsync =("/usr/bin/imapsync","--host2","localhost","--port2","143","--tls2","--user2",
        $name.'*vmail',"--passfile2","/var/lib/nethserver/imapsync/vmail.pwd","--host1",$hostname,
        "--port1",$Port,$crypt,"--user1",$username,"--passfile1","/var/lib/nethserver/imapsync/".$name.".pwd",
        "--exclude","^Public Folders|^Trash|^Deleted Items|^Public".$exclude,
        "--timeout1","10","--no-modulesversion","--justfoldersizes","--nolog");

    open(FH, "-|",@imapsync);

    while (<FH>) {
        chomp;
        if ($_ =~ 'Host2 Nb folders') {
        my @num = $_ =~  / (\d+)/;
        $ret->{host2Folders} = int $num[0];
        }
        elsif ($_ =~ 'Host2 Nb messages') {
        my @num = $_ =~  / (\d+)/;
        $ret->{host2Messages} = int $num[0];
        }
        elsif ($_ =~ 'Host2 Total size') {
            my @num = $_ =~  / (\d+)/;
            $ret->{host2Sizes} = int $num[0];
        }
        elsif ($_ =~ 'Host1 Nb folders') {
            my @num = $_ =~  / (\d+)/;
            $ret->{host1Folders} = int $num[0];
        }
        elsif ($_ =~ 'Host1 Nb messages') {
        my @num = $_ =~  / (\d+)/;
        $ret->{host1Messages} = int $num[0];
        }
        elsif ($_ =~ 'Host1 Total size') {
            my @num = $_ =~  / (\d+)/;
            $ret->{host1Sizes} = int $num[0];
        }
    }
    close(FH);

    if ($?) {
        $ret->{status} = 'error';
    } else {
        $ret->{status} = 'success';
    }

} else {
    error();
}

print encode_json($ret);
