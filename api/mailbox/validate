#!/usr/bin/php
<?php
/*
 * Copyright (C) 2019 Nethesis S.r.l.
 * http://www.nethesis.it - nethserver@nethesis.it
 *
 * This script is part of NethServer.
 *
 * NethServer is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License,
 * or any later version.
 *
 * NethServer is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with NethServer.  If not, see COPYING.
*/


require_once("/usr/libexec/nethserver/api/lib/Helpers.php");

function list_public_folders()
{
    $ret = array();
    exec('/usr/bin/doveadm mailbox list -u vmail Public/*', $output);
    foreach ($output as $line) {
        $line = substr($line, 7);
        if (strpos($line,"/")!== false) {
            continue;
        }
        $ret[] = $line;
    }
    return $ret;
}

function validate_acls($v, $data) {
    $rights = array("read", "read-write", "full");

    foreach ($data['acls'] as $acl) {
        if ($acl['type'] == 'user') {
            $users = json_decode(shell_exec("/usr/libexec/nethserver/list-users"), true);
            if (!in_array($acl['name'], array_keys($users))) {
                $v->addValidationError('rights', 'invalid_user');
            }

        } else if ($acl['type'] == 'group') {
            $groups =  json_decode(shell_exec("/usr/libexec/nethserver/list-groups"), true);
            if (!in_array($acl['name'], array_keys($groups))) {
                $v->addValidationError('rights', 'invalid_group');
            }
        }

        foreach ($acl['rights'] as $r) {
            if (!in_array($r, $rights)) {
                $v->addValidationError('rights', 'invalid_rights');
            }
        }
    }
}


$data = readInput();

$v = new LegacyValidator($data);
if ($data['action'] == 'configuration') {
    $v->declareParameter('DeletedToTrash', Validate::SERVICESTATUS);
    $v->declareParameter('LogActions', Validate::SERVICESTATUS);
    $v->declareParameter('DynamicGroupAlias', Validate::SERVICESTATUS);
    $v->declareParameter('PopStatus', Validate::SERVICESTATUS);
    $v->declareParameter('QuotaStatus', Validate::SERVICESTATUS);
    $v->declareParameter('AdminIsMaster', Validate::SERVICESTATUS);
    $v->declareParameter('ImapStatus', Validate::SERVICESTATUS);
    $v->declareParameter('TlsSecurity', Validate::SERVICESTATUS);
    $v->declareParameter('SpamFolder', Validate::SERVICESTATUS);
    $v->declareParameter('SpamRetentionTime', $v->createValidator()->integer()->greatThan(-2)->lessThan(365));
    $v->declareParameter('QuotaDefaultSize', Validate::POSITIVE_INTEGER);
    $v->declareParameter('MaxUserConnectionsPerIp', Validate::POSITIVE_INTEGER);

} else if ($data['action'] == 'update-group') {
    $v->declareParameter('MailStatus', Validate::SERVICESTATUS);

} else if ($data['action'] == 'update-user') {
    $v->declareParameter('MailForwardKeepMessageCopy', $v->createValidator()->memberOf('yes', 'no'));
    $v->declareParameter('MailForwardStatus', Validate::SERVICESTATUS);
    $v->declareParameter('MailStatus', Validate::SERVICESTATUS);
    $v->declareParameter('MailSpamRetentionTime', $v->createValidator()->integer()->greatThan(-2)->lessThan(365));
    $v->declareParameter('MailQuotaType', $v->createValidator()->memberOf('default', 'custom'));
    $v->declareParameter('MailQuotaCustom', Validate::POSITIVE_INTEGER);

    if ($data['MailForwardAddress']) {
        $mailv = $v->createValidator(Validate::EMAIL);
        foreach ($data['MailForwardAddress'] as $value) {
            if (!$mailv->evaluate($value)) {
                $v->addValidationError('MailForwardAddress', 'valid_mail_address');
            }
        }
    }
} else if ($data['action'] == 'create-public') {


    if (in_array($data['name'], list_public_folders())) {
        $v->addValidationError('name', 'public_mailbox_already_exists');
    }

    validate_acls($v, $data);


} else if ($data['action'] == 'update-public') {

    if (!in_array($data['name'], list_public_folders())) {
        $v->addValidationError('name', 'public_mailbox_not_exists');
    }

    validate_acls($v, $data);

} else {
    error();
}



# Validate the input
if ($v->validate()) {
    success();
} else {
    error($v);
}
